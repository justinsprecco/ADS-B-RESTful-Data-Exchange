openapi: 3.1.0
info:
  title: User Service
  description: A user management API for the ADS-B RESTful Data Exchange
  version: 1.0.0

paths:
  /users:
    post:
      summary: Create a new user
      description: Registers a new user in the data exchange.
      security: []
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                description: User created successfully
                $ref: "#/components/schemas/ResponseMessage"
              example:
                message: "User added with ID: 60d2f1f3b3c5e25d12d34abc"
        409:
          description: Username already exists.
        500:
          description: Server Error

    get:
      summary: Get all users
      description: Gets all users registered in the database.
      tags:
        - Users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
              example:
                $ref: "#/components/examples/GetUsersResponseExample"
        404:
          description: Not found
        500:
          description: Server Error

  /users/{id}:
    get:
      summary: Get user by id
      description: Gets a specified user by id.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
              example:
                $ref: "#/components/examples/GetUserResponseExample"
        404:
          description: Not found
        500:
          description: Server Error

    delete:
      summary: Delete user by id
      description: Deletes a specified user by id.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                message: "User 60d2f1f3b3c5e25d12d34abc deleted successfully."
        404:
          description: Not found
        500:
          description: Server Error

    put:
      summary: Update user by id
      description: Updates a specified user's latitude/longitude.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                message: "User 60d2f1f3b3c5e25d12d34abc updated successfully."
        404:
          description: Not found
        500:
          description: Server Error

  /users/validate:
    post:
      summary: Verify a User
      description: Checks for the given username and password, validating for login.
      security: []
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyUserRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                message: User credentials validated successfully
        404:
          description: Not found
        401:
          description: Invalid password
        500:
          description: Server Error

  /users/{id}/devices:
    post:
      summary: Add a new device
      description: Registers a new device.
      tags:
        - Devices
      parameters:
        - $ref: "#/components/parameters/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeviceRequest"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                message: "Device 01:a2:b3:c4:d5:e6 added with id 60d2f1f3b3d34dk4l2d0 and associated with user 60d2f1f3b3c5e25d12d34abc"
        404:
          description: Not found
        409:
          description: Device already exists
        500:
          description: Server Error

  /users/{id}/devices{deviceId}:
    get:
      summary: Get a device
      description: Gets a device by id.
      tags:
        - Devices
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/DeviceId"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceResponse"
              example:
                $ref: "#/components/examples/GetDeviceResponseExample"
        404:
          description: Not Found
        500:
          description: Server Error

    delete:
      summary: Delete a device
      description: Deletes a device by id.
      tags:
        - Devices
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/DeviceId"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
              example:
                message: "Device 60d2f1f3b3d34dk4l2d0 deleted successfully."
        404:
          description: Not Found
        500:
          description: Server Error

    put:
      summary: Update a device
      description: Updates a device's latitude/longitude by id.
      tags:
        - Devices
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/DeviceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDeviceRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Device 60d2f1f3b3d34dk4l2d0 updated successfully."
        404:
          description: Not Found
        500:
          description: Server Error

components:
  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: The ID of the user
      schema:
        type: string
        example: 60d2f1f3b3c5e25d12d34abc
    DeviceId:
      name: deviceId
      in: path
      required: true
      description: The ID of the device
      schema:
        type: string
        example: 60d2f1f3b3d34dk4l2d0

  securitySchemes:
    OAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/UserId"
        username:
          $ref: "#/components/schemas/Username"
        password:
          $ref: "#/components/schemas/Password"
        devices:
          type: array
          items:
            $ref: "#/components/schemas/Device"

    UserId:
      description: Unique identifier for a user.
      type: string
      format: objectId
      example: 60d2f1f3b3c5e25d12d34abc
    Username:
      description: The username for the user.
      type: string
      example: testUser
    Password:
      description: The password for the user.
      type: string
      example: password

    Device:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/DeviceId"
        userId:
          $ref: "#/components/schemas/UserId"
        macAddress:
          $ref: "#/components/schemas/MacAddress"
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"

    DeviceId:
      description: Unique identifier for a device.
      type: string
      format: objectId
      example: 60d2f1f3b3d34dk4l2d0
    MacAddress:
      description: Mac address of a device.
      type: string
      example: 01:a2:b3:c4:d5:e6
    Latitude:
      description: Latitude where a device is located.
      type: float
      example: 45.731560
    Longitude:
      description: Longitude where a device is located.
      type: float
      example: -122.636872

    CreateUserRequest:
      description: Request payload for creating new users.
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        password:
          $ref: "#/components/schemas/Password"
      required:
        - username
        - password

    UpdateUserRequest:
      description: Request payload for updating a user.
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        password:
          $ref: "#/components/schemas/Password"
      required: []
      oneOf:
        - required: ["username"]
        - required: ["password"]

    VerifyUserRequest:
      description: Request payload for verifying a user.
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        password:
          $ref: "#/components/schemas/Password"
      required:
        - username
        - password

    CreateDeviceRequest:
      description: Request payload for registering a device.
      type: object
      properties:
        macAddress:
          $ref: "#/components/schemas/MacAddress"
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      required:
        - macAddress
        - latitude
        - longitude

    UpdateDeviceRequest:
      description: Request payload for updating a devices.
      type: object
      properties:
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      required: []
      oneOf:
        - required: ["latitude"]
        - required: ["longitude"]

    ResponseMessage:
      type: object
      properties:
        message:
          type: string

    GetUsersResponse:
      description: List of all users.
      type: array
      items:
        properties:
          _id:
            $ref: "#/components/schemas/UserId"
          username:
            $ref: "#/components/schemas/Username"

    GetUserResponse:
      description: An individual user.
      properties:
        username:
          $ref: "#/components/schemas/Username"
        devices:
          type: array
          items:
            $ref: "#/components/schemas/DeviceId"

    GetDeviceResponse:
      description: A single user devices.
      properties:
        macAddress:
          $ref: "#/components/schemas/MacAddress"
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"

  examples:
    GetUsersResponseExample:
      - _id: 60d2f1f3b3c5e25d12d34abc
        username: user1
        devices:
          - 64ef29c25f6e51b89c41a1e3
          - 64ef29cb2a4f9e314781df62
          - 64ef29d091e8231c64ab35f7
      - _id: 60d2f1f3b3c5e25d12d34abd
        username: user2
        devices:
          - 64ef2a18a6d5c8719f32d123
          - 64ef2a25ad4e3c91c71a4e67

      - _id: 60d2f1f3b3c5e25d12d34abe
        username: user3
        devices:
          - 64ef2a32e82a6f1b67d42c12
          - 64ef2a37b9f3d87c91e4d763
          - 64ef2a3cc5f9a1748b92e864
          - 64ef2a41e3b6d25f72c34a75

    GetUserResponseExample:
      username: user1
      devices:
        - 64ef29c25f6e51b89c41a1e3
        - 64ef29cb2a4f9e314781df62
        - 64ef29d091e8231c64ab35f7

    GetDeviceResponseExample:
      macAddress: 01:a2:b3:c4:d5:e6
      latitude: 45.731560
      longitude: -122.636872

tags:
  - name: Users
    x-displayName: User Management
    description: Manage users in the data exchange.
  - name: Devices
    x-displayName: Device Management
    description: Manage devices in the data exchange.

security:
  - OAuth: []
